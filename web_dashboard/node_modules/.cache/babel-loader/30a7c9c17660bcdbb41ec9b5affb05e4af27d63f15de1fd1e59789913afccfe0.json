{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows\\\\OneDrive\\\\Desktop\\\\big algo\\\\web_dashboard\\\\src\\\\contexts\\\\ApiContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiContext = /*#__PURE__*/createContext();\nexport const useApi = () => {\n  _s();\n  const context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n};\n_s(useApi, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ApiProvider = ({\n  children\n}) => {\n  _s2();\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // API base URL\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n  // Create axios instance\n  const api = axios.create({\n    baseURL: API_BASE_URL,\n    timeout: 10000\n  });\n\n  // Request interceptor\n  api.interceptors.request.use(config => {\n    // Add auth headers if needed\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Response interceptor\n  api.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    var _error$response, _error$response$data;\n    const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'An error occurred';\n    toast.error(message);\n    return Promise.reject(error);\n  });\n\n  // Fetch dashboard data\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/dashboard');\n      setDashboardData(response.data);\n      setLastUpdate(new Date());\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error fetching dashboard data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch P&L data by period\n  const fetchPnLData = async period => {\n    try {\n      const response = await api.get(`/pnl/${period}`);\n      return response.data;\n    } catch (err) {\n      console.error(`Error fetching ${period} P&L data:`, err);\n      throw err;\n    }\n  };\n\n  // Fetch trades\n  const fetchTrades = async (type = 'open', limit = 50) => {\n    try {\n      const response = await api.get(`/trades/${type}`, {\n        params: {\n          limit\n        }\n      });\n      return response.data;\n    } catch (err) {\n      console.error(`Error fetching ${type} trades:`, err);\n      throw err;\n    }\n  };\n\n  // Fetch trades by symbol\n  const fetchTradesBySymbol = async symbol => {\n    try {\n      const response = await api.get(`/trades/symbol/${symbol}`);\n      return response.data;\n    } catch (err) {\n      console.error(`Error fetching trades for ${symbol}:`, err);\n      throw err;\n    }\n  };\n\n  // Fetch trade stats\n  const fetchTradeStats = async () => {\n    try {\n      const response = await api.get('/trades/stats');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching trade stats:', err);\n      throw err;\n    }\n  };\n\n  // Fetch risk summary\n  const fetchRiskSummary = async () => {\n    try {\n      const response = await api.get('/risk/summary');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching risk summary:', err);\n      throw err;\n    }\n  };\n\n  // Fetch risk metrics\n  const fetchRiskMetrics = async () => {\n    try {\n      const response = await api.get('/risk/metrics');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching risk metrics:', err);\n      throw err;\n    }\n  };\n\n  // Fetch session info\n  const fetchSessionInfo = async () => {\n    try {\n      const response = await api.get('/session/info');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching session info:', err);\n      throw err;\n    }\n  };\n\n  // Fetch symbol session status\n  const fetchSymbolSessionStatus = async symbol => {\n    try {\n      const response = await api.get(`/session/symbol/${symbol}`);\n      return response.data;\n    } catch (err) {\n      console.error(`Error fetching session status for ${symbol}:`, err);\n      throw err;\n    }\n  };\n\n  // Fetch algo health\n  const fetchAlgoHealth = async () => {\n    try {\n      const response = await api.get('/health/algo');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching algo health:', err);\n      throw err;\n    }\n  };\n\n  // Fetch system status\n  const fetchSystemStatus = async () => {\n    try {\n      const response = await api.get('/health/system');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching system status:', err);\n      throw err;\n    }\n  };\n\n  // Fetch settings\n  const fetchSettings = async () => {\n    try {\n      const response = await api.get('/config/settings');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching settings:', err);\n      throw err;\n    }\n  };\n\n  // Fetch symbol configs\n  const fetchSymbolConfigs = async () => {\n    try {\n      const response = await api.get('/config/symbols');\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching symbol configs:', err);\n      throw err;\n    }\n  };\n\n  // Export trades\n  const exportTrades = async (format = 'csv', options = {}) => {\n    try {\n      const response = await api.post('/export/trades', {\n        format,\n        ...options\n      });\n      return response.data;\n    } catch (err) {\n      console.error('Error exporting trades:', err);\n      throw err;\n    }\n  };\n\n  // Download export file\n  const downloadExport = async filename => {\n    try {\n      const response = await api.get(`/export/download/${filename}`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      toast.success('Export downloaded successfully');\n    } catch (err) {\n      console.error('Error downloading export:', err);\n      throw err;\n    }\n  };\n\n  // Auto-refresh dashboard data\n  useEffect(() => {\n    fetchDashboardData();\n\n    // Set up auto-refresh every 30 seconds\n    const interval = setInterval(fetchDashboardData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const value = {\n    // State\n    dashboardData,\n    loading,\n    error,\n    lastUpdate,\n    // API methods\n    api,\n    fetchDashboardData,\n    fetchPnLData,\n    fetchTrades,\n    fetchTradesBySymbol,\n    fetchTradeStats,\n    fetchRiskSummary,\n    fetchRiskMetrics,\n    fetchSessionInfo,\n    fetchSymbolSessionStatus,\n    fetchAlgoHealth,\n    fetchSystemStatus,\n    fetchSettings,\n    fetchSymbolConfigs,\n    exportTrades,\n    downloadExport\n  };\n  return /*#__PURE__*/_jsxDEV(ApiContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s2(ApiProvider, \"WkTiXKJJBgxBY9vmqSF+4mMkbls=\");\n_c = ApiProvider;\nvar _c;\n$RefreshReg$(_c, \"ApiProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","jsxDEV","_jsxDEV","ApiContext","useApi","_s","context","Error","ApiProvider","children","_s2","dashboardData","setDashboardData","loading","setLoading","error","setError","lastUpdate","setLastUpdate","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","Promise","reject","response","_error$response","_error$response$data","message","data","detail","fetchDashboardData","get","Date","err","console","fetchPnLData","period","fetchTrades","type","limit","params","fetchTradesBySymbol","symbol","fetchTradeStats","fetchRiskSummary","fetchRiskMetrics","fetchSessionInfo","fetchSymbolSessionStatus","fetchAlgoHealth","fetchSystemStatus","fetchSettings","fetchSymbolConfigs","exportTrades","format","options","post","downloadExport","filename","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","success","interval","setInterval","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Windows/OneDrive/Desktop/big algo/web_dashboard/src/contexts/ApiContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst ApiContext = createContext();\r\n\r\nexport const useApi = () => {\r\n  const context = useContext(ApiContext);\r\n  if (!context) {\r\n    throw new Error('useApi must be used within an ApiProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ApiProvider = ({ children }) => {\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastUpdate, setLastUpdate] = useState(null);\r\n\r\n  // API base URL\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\n\r\n  // Create axios instance\r\n  const api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 10000,\r\n  });\r\n\r\n  // Request interceptor\r\n  api.interceptors.request.use(\r\n    (config) => {\r\n      // Add auth headers if needed\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // Response interceptor\r\n  api.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      const message = error.response?.data?.detail || error.message || 'An error occurred';\r\n      toast.error(message);\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // Fetch dashboard data\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/dashboard');\r\n      setDashboardData(response.data);\r\n      setLastUpdate(new Date());\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error fetching dashboard data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch P&L data by period\r\n  const fetchPnLData = async (period) => {\r\n    try {\r\n      const response = await api.get(`/pnl/${period}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(`Error fetching ${period} P&L data:`, err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch trades\r\n  const fetchTrades = async (type = 'open', limit = 50) => {\r\n    try {\r\n      const response = await api.get(`/trades/${type}`, {\r\n        params: { limit }\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(`Error fetching ${type} trades:`, err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch trades by symbol\r\n  const fetchTradesBySymbol = async (symbol) => {\r\n    try {\r\n      const response = await api.get(`/trades/symbol/${symbol}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(`Error fetching trades for ${symbol}:`, err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch trade stats\r\n  const fetchTradeStats = async () => {\r\n    try {\r\n      const response = await api.get('/trades/stats');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching trade stats:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch risk summary\r\n  const fetchRiskSummary = async () => {\r\n    try {\r\n      const response = await api.get('/risk/summary');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching risk summary:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch risk metrics\r\n  const fetchRiskMetrics = async () => {\r\n    try {\r\n      const response = await api.get('/risk/metrics');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching risk metrics:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch session info\r\n  const fetchSessionInfo = async () => {\r\n    try {\r\n      const response = await api.get('/session/info');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching session info:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch symbol session status\r\n  const fetchSymbolSessionStatus = async (symbol) => {\r\n    try {\r\n      const response = await api.get(`/session/symbol/${symbol}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(`Error fetching session status for ${symbol}:`, err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch algo health\r\n  const fetchAlgoHealth = async () => {\r\n    try {\r\n      const response = await api.get('/health/algo');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching algo health:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch system status\r\n  const fetchSystemStatus = async () => {\r\n    try {\r\n      const response = await api.get('/health/system');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching system status:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch settings\r\n  const fetchSettings = async () => {\r\n    try {\r\n      const response = await api.get('/config/settings');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching settings:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch symbol configs\r\n  const fetchSymbolConfigs = async () => {\r\n    try {\r\n      const response = await api.get('/config/symbols');\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching symbol configs:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Export trades\r\n  const exportTrades = async (format = 'csv', options = {}) => {\r\n    try {\r\n      const response = await api.post('/export/trades', {\r\n        format,\r\n        ...options\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error exporting trades:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Download export file\r\n  const downloadExport = async (filename) => {\r\n    try {\r\n      const response = await api.get(`/export/download/${filename}`, {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      // Create download link\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', filename);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      toast.success('Export downloaded successfully');\r\n    } catch (err) {\r\n      console.error('Error downloading export:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Auto-refresh dashboard data\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n    \r\n    // Set up auto-refresh every 30 seconds\r\n    const interval = setInterval(fetchDashboardData, 30000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const value = {\r\n    // State\r\n    dashboardData,\r\n    loading,\r\n    error,\r\n    lastUpdate,\r\n    \r\n    // API methods\r\n    api,\r\n    fetchDashboardData,\r\n    fetchPnLData,\r\n    fetchTrades,\r\n    fetchTradesBySymbol,\r\n    fetchTradeStats,\r\n    fetchRiskSummary,\r\n    fetchRiskMetrics,\r\n    fetchSessionInfo,\r\n    fetchSymbolSessionStatus,\r\n    fetchAlgoHealth,\r\n    fetchSystemStatus,\r\n    fetchSettings,\r\n    fetchSymbolConfigs,\r\n    exportTrades,\r\n    downloadExport,\r\n  };\r\n\r\n  return (\r\n    <ApiContext.Provider value={value}>\r\n      {children}\r\n    </ApiContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}